package com.andaily.web.controller;


import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.andaily.domain.application.ThreadInstance;
import com.andaily.domain.dto.application.ThreadInstanceFormDto;
import com.andaily.domain.dto.application.ThreadInstanceListDto;
import com.andaily.service.LogService;
import com.andaily.service.ThreadInstanceService;
import com.google.common.base.Splitter;
import com.google.common.base.Strings;
import com.google.gson.Gson;

import org.apache.log4j.xml.Log4jEntityResolver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

/**
 * @author qxf
 */
@Controller
@RequestMapping("system/")
public class ThreadInstanceController {

	@Autowired
    private LogService logService;
	@Autowired
    private ThreadInstanceService instanceService;
	
	

    @RequestMapping("list.hb")
    public String list(ThreadInstanceListDto listDto, Model model) {
        instanceService.loadThreadInstanceListDto(listDto);
        model.addAttribute("listDto", listDto);
        return "thread/instance_list";
    }

    /*
    * Enable newly instance
    * */
    @RequestMapping("enable.hb")
    public String enableInstance(@RequestParam String guid, Model model) {
        final boolean result = instanceService.enableThreadInstance(guid);
        model.addAttribute("alert", result ? "enableSuccess" : "enableFailed");
        return "redirect:list.hb";
    }

    /*
    * Stop monitoring instance
    * */
    @RequestMapping("stop.hb")
    public String stopInstance(@RequestParam String guid, Model model) {
        final boolean result = instanceService.stopMonitoringThreadInstance(guid);
        model.addAttribute("alert", result ? "stopSuccess" : "stopFailed");
        return "redirect:list.hb";
    }

    /*
    * Delete instance
    * */
    @RequestMapping("delete.hb")
    public String deleteInstance(@RequestParam String guid, Model model) {
        final boolean result = instanceService.deleteThreadInstance(guid);
        model.addAttribute("alert", result ? "deleteSuccess" : "deleteFailed");
        return "redirect:list.hb";
    }

    /*
   * New/Edit instance
   * */
    @RequestMapping(value = "instance_form.hb", method = RequestMethod.GET)
    public String loadForm(String guid, Model model) {
        ThreadInstanceFormDto formDto = instanceService.loadThreadInstanceFormDto(guid);
        model.addAttribute("formDto", formDto);
        return "thread/instance_form";
    }

    @RequestMapping(value = "instance_form.hb", method = RequestMethod.POST)
    public String submitForm(@ModelAttribute("formDto") @Valid ThreadInstanceFormDto formDto, BindingResult result, Model model) {
        if (result.hasErrors()) {
            return "thread/instance_form";
        }
        instanceService.persistThreadInstance(formDto);
        model.addAttribute("alert", "saveInstanceOK");
        return "redirect:list.hb";
    }
    @RequestMapping(value = "updateOrNew", method = RequestMethod.POST)
    public void updateOrNew(String param,HttpServletRequest request) {
    	if(Strings.isNullOrEmpty(param)){
    	}else{
    	ThreadInstanceFormDto formDto =new ThreadInstanceFormDto();
    	Map<String,String> map=Splitter.on(",").omitEmptyStrings().withKeyValueSeparator(":").split(param);
    	/*List<ThreadInstance> list=instanceService.findByInstanceNameTolist();
    	for (ThreadInstance threadInstance : list) {
    		formDto.setContentType("1");
    		formDto.setInstanceName(threadInstance.instanceName());
    		formDto.setEnabled(true);
    		formDto.setGuid(threadInstance.guid());
    		instanceService.persistThreadInstance(formDto);
		}*/
    	//instanceService.persistThreadInstance(formDto);
    	String ip=getIpAddr(request);
       	instanceService.updateContentType(ip);
    	//formDto=null;
    	for (String str : map.keySet()) {
    		ThreadInstance ins=instanceService.findByInstanceName(map.get(str));
    		if(ins!=null){
    			
    			instanceService.updateContentType(ins.guid());	
    		}else{
    			formDto.setContentType("1");
        		formDto.setInstanceName(map.get(str));
        		formDto.setEnabled(true);
        		formDto.setMonitorUrl(ip);
        		instanceService.persistThreadInstance(formDto);
    		}
    		
    		
		}  
    	System.out.println("成功");
    	
    	}        //
    	//return "redirect:list.hb";
    }
    private String getIpAddr(HttpServletRequest request) {
        String ip = request.getHeader("x-forwarded-for"); 
        System.out.println("x-forwarded-for ip: " + ip);
        if (ip != null && ip.length() != 0 && !"unknown".equalsIgnoreCase(ip)) {  
            // 多次反向代理后会有多个ip值，第一个ip才是真实ip
            if( ip.indexOf(",")!=-1 ){
                ip = ip.split(",")[0];
            }
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getHeader("Proxy-Client-IP");  
            System.out.println("Proxy-Client-IP ip: " + ip);
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getHeader("WL-Proxy-Client-IP");  
            System.out.println("WL-Proxy-Client-IP ip: " + ip);
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getHeader("HTTP_CLIENT_IP");  
            System.out.println("HTTP_CLIENT_IP ip: " + ip);
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getHeader("HTTP_X_FORWARDED_FOR");  
            System.out.println("HTTP_X_FORWARDED_FOR ip: " + ip);
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getHeader("X-Real-IP");  
            System.out.println("X-Real-IP ip: " + ip);
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getRemoteAddr();  
            System.out.println("getRemoteAddr ip: " + ip);
        } 
        System.out.println("获取客户端ip: " + ip);
        return ip;  
    }	
}