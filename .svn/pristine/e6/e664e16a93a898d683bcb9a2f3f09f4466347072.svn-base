package com.andaily.service.operation.instance;

import com.andaily.domain.application.ThreadInstance;
import com.andaily.domain.application.ThreadInstanceRepository;

import com.andaily.domain.application.InstanceMonitorURLParameter;
import com.andaily.domain.dto.application.ThreadInstanceFormDto;
import com.andaily.domain.dto.application.InstanceMonitorURLParameterDto;
import com.andaily.domain.shared.BeanProvider;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

/**
 * 15-1-4
 *
 * @author Shengzhao Li
 */
public class ThreadInstanceFormDtoPersister {

    private static final Logger LOGGER = LoggerFactory.getLogger(ThreadInstanceFormDtoPersister.class);

    private transient ThreadInstanceRepository instanceRepository = BeanProvider.getBean(ThreadInstanceRepository.class);
    //private transient UserRepository userRepository = BeanProvider.getBean(UserRepository.class);
    private ThreadInstanceFormDto formDto;

    
    public ThreadInstanceFormDtoPersister(ThreadInstanceFormDto formDto) {
        this.formDto = formDto;
    }
    public void persist() {
        if (formDto.isNewly()) {
            createInstance();
        } else {
            updateInstance();
        }
    }

    private void updateInstance() {
        ThreadInstance instance = instanceRepository.findByGuid(formDto.getGuid(), ThreadInstance.class);
        if (instance.enabled()) {
            throw new IllegalStateException("Only Disabled ThreadInstance support edit");
        }
        updateWeixinUsers(instance, false);
        formDto.updateDomain(instance);
        setRequestParams(instance);
       // LOGGER.debug("<{}> Update ThreadInstance [{}]", SecurityUtils.currentUsername(), instance);
    }

    private void createInstance() {
        ThreadInstance instance = formDto.updateDomain(new ThreadInstance());
       // instance.creator(SecurityUtils.currentUser());

        setRequestParams(instance);

        instanceRepository.saveOrUpdate(instance);
      //  updateWeixinUsers(instance, true);
      //  LOGGER.debug("<{}> Create ThreadInstance [{}]", SecurityUtils.currentUsername(), instance);
    }

    private void updateWeixinUsers(ThreadInstance instance, boolean newly) {
        if (!newly) {
            //clean old
            final int amount = instanceRepository.deleteThreadInstanceWeixinUsers(instance);
          //  LOGGER.debug("<{}> delete old ThreadInstanceWeixinUsers: {}", SecurityUtils.currentUsername(), amount);
        }
        final List<String> weixinUserGuids = formDto.getWeixinUserGuids();
        if (weixinUserGuids == null || weixinUserGuids.isEmpty()) {
            return;
        }
       // List<ThreadInstanceWeixinUser> newWeixinUsers = new ArrayList<>();
        /*for (String weixinUserGuid : weixinUserGuids) {
            WeixinUser weixinUser = userRepository.findWeixinUserByGuid(weixinUserGuid);
            newWeixinUsers.add(new ThreadInstanceWeixinUser(instance, weixinUser));
        }*/
       // userRepository.saveOrUpdateAll(newWeixinUsers);
       // LOGGER.debug("<{}> Create newWeixinUsers: {}", SecurityUtils.currentUsername(), newWeixinUsers);
    }

    private void setRequestParams(ThreadInstance instance) {
        final List<InstanceMonitorURLParameter> urlParameters = instance.instanceURL().urlParameters();
        if (!instance.isNewly()) {
            //remove old
            instanceRepository.deleteAll(urlParameters);
            urlParameters.clear();
        }

        final List<InstanceMonitorURLParameterDto> urlParameterDtos = formDto.getUrlParameters();
        for (InstanceMonitorURLParameterDto urlParameterDto : urlParameterDtos) {
            if (urlParameterDto.available()) {
                urlParameters.add(urlParameterDto.newDomain());
            } else {
                LOGGER.debug("Ignore URL parameter[{}], because key is empty", urlParameterDto);
            }
        }

    }
}
