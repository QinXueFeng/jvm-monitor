package com.andaily.service.operation.job;
import com.andaily.domain.application.ApplicationInstance;
import com.andaily.domain.application.ThreadInstance;
import com.andaily.domain.application.ThreadInstanceRepository;
import com.andaily.domain.log.FrequencyMonitorLog;
import com.andaily.domain.log.reminder.PerMonitoringReminder;
import com.andaily.domain.log.reminder.ThreadReminder;
import com.andaily.domain.shared.BeanProvider;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.Assert;

/**
 * 每一次的 心跳监测 执行类
 *
 * @author Shengzhao Li
 */
public class ThreadBeatExecutor {

	
    private static final Logger LOGGER = LoggerFactory.getLogger(ThreadBeatExecutor.class);

    private transient ThreadInstanceRepository instanceRepository = BeanProvider.getBean(ThreadInstanceRepository.class);
    private String instanceGuid;

    public ThreadBeatExecutor(String instanceGuid) {
        this.instanceGuid = instanceGuid;
    }

    /**
     * Execute heart-beat
     * <p/>
     * 1.Send request and checking response
     * 2.Generate FrequencyMonitorLog
     * 3. If failed will notice
     * <p/>
     * <p/>
     * 执行心跳监测的流程
     * 1. 向指定的 URL 发送请求并检测响应情况
     * 2. 记录每一次的监控日志(FrequencyMonitorLog)
     * 3.若状态变更则发送提醒
     */
    public void execute() {
        final ThreadInstance instance = instanceRepository.findByGuid(instanceGuid, ThreadInstance.class);
        
        final FrequencyMonitorLog monitorLog = generateMonitorLog(instance);

        
        LOGGER.debug("Generate and persist FrequencyMonitorLog[{}]", monitorLog);
        //reminder
        remind(monitorLog);
    }
    
    /*
    * 处理 监控异常时的 提醒操作
    * */
    private void remind(FrequencyMonitorLog monitorLog) {
    	ThreadReminder reminder = new ThreadReminder(monitorLog);
        reminder.remind();
    }

    /*
    * 生成 监控日志
    * */
    private FrequencyMonitorLog generateMonitorLog(ThreadInstance instance) {
       
       // 
       FrequencyMonitorLog monitorLog = new FrequencyMonitorLog();
       // monitorLog.instance(instance);
        ApplicationInstance instances=new ApplicationInstance();
    	instances.instanceName(instance.instanceName());
    	instances.email(instance.email());
    	instances.guid(instance.guid());
    	instances.jobName(instance.jobName());
    	instances.remark(instance.remark());
    	instances.createTime(instance.createTime());
    	System.out.println(instance.instanceURL().contentType());
    	instances.instanceURL().contentType(instance.instanceURL().contentType());
        return monitorLog.instance(instances);
    	/*ApplicationInstance instances=new ApplicationInstance();
    	instances.instanceName(instance.instanceName());
    	instances.email(instance.email());
    	instances.guid(instance.guid());
    	instances.jobName(instance.jobName());
    	instances.remark(instance.remark());
    	instances.createTime(instance.createTime());
    	FrequencyMonitorLogGenerator monitorLogGenerator = new FrequencyMonitorLogGenerator(instances);
        return monitorLogGenerator.generate();*/
    }
}