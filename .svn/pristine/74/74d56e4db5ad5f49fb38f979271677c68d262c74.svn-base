package com.andaily.service.operation.instance;

import com.andaily.domain.application.ThreadInstance;
import com.andaily.domain.application.ThreadInstanceRepository;
import com.andaily.domain.shared.BeanProvider;
import com.andaily.infrastructure.scheduler.DynamicJob;
import com.andaily.infrastructure.scheduler.DynamicSchedulerFactory;
import com.google.common.base.Strings;

import org.quartz.SchedulerException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Shengzhao Li
 */
public class ThreadInstanceDeleter {

    private static final Logger LOGGER = LoggerFactory.getLogger(ThreadInstanceDeleter.class);
    private transient ThreadInstanceRepository instanceRepository = BeanProvider.getBean(ThreadInstanceRepository.class);
    private String guid;

    public ThreadInstanceDeleter(String guid) {
        this.guid = guid;
    }

    public boolean delete() {
        final ThreadInstance instance = instanceRepository.findByGuid(guid, ThreadInstance.class);
        if (instance.enabled()) {
           // LOGGER.debug("<{}> Forbid delete enabled ThreadInstance[guid={}]", currentUsername(), instance.guid());
            return false;
        }

        instanceRepository.deleteInstanceFrequencyMonitorLogs(guid);
        instanceRepository.deleteInstanceMonitoringReminderLogs(guid);

        checkAndRemoveJob(instance);

        //logic delete
        instance.archived(true);
       // LOGGER.debug("<{}> Archive ThreadInstance[guid={}] and FrequencyMonitorLogs,MonitoringReminderLogs", currentUsername(), instance.guid());
        return true;
    }

    private void checkAndRemoveJob(ThreadInstance instance) {
    	if(!Strings.isNullOrEmpty(instance.jobName())){
        DynamicJob job = new DynamicJob(instance.jobName());
        try {
        	
            if (DynamicSchedulerFactory.existJob(job)) {
                final boolean result = DynamicSchedulerFactory.removeJob(job);
           //     LOGGER.debug("<{}> Remove DynamicJob[{}] result [{}]", currentUsername(), job, result);
            }
        } catch (SchedulerException e) {
          //  LOGGER.error("<{}> Remove [" + job + "] failed", currentUsername(), e);
        }
    }
    }
}